import datetime
# Save on .trc a struct for debug
def save_log_trc():
    global strct_log_msg
    ##---------------------------------------------------------------------------------------
    frames =[]
    #Enlève l'indicateur de queue
    for frame in strct_log_msg:
        if frame !="NEW PACKET" and frame !=[]:
            frames.append(frame)#msg_uncompressed_history

    #mise en forme de la start_date
    start_date = datetime.datetime.fromtimestamp(int(frames[0]['t_s']))
    start_date = start_date.strftime("%d/%m/%Y %H:%M:%S")

    #------------Benchmark data out ---------------------------------------------------
    # nb_octet_uncompressed = 0
    # for data_uncompressed in list_uncompressed_sorted:
    #         nb_octet_uncompressed += 1 + 2  + 1  + len(data_uncompressed["data"])
    #         #                     id +time+sort+ data
    # print ("facteur compression : " + str(nb_octet_uncompressed/nb_octet_compressed))
    #----------------------------------------------------------------------------------

    #ecriture fichier de sortie
    i = 0
    # création nom du fichier
    now = datetime.datetime.now()
    now_str = now.strftime("%d-%m-%Y_%H-%M-%S")
    file_name = "log_" + now_str + ".trc"
    with open(file_name, 'w') as f: 
    
        #Ecriture en tête
        f.write(""";$FILEVERSION=1.3
;$STARTTIME=44956.551155115827
;
;   Start time: """ + str(start_date) +"""
;   Generated by NWT Network Bridge v1.0.0
;-------------------------------------------------------------------------------
;   Bus  Connection   Net Connection     Protocol  Bit rate
;   1    Connection1  Mqtt               Custom    Custom
;-------------------------------------------------------------------------------
;   Message   Time    Bus  Type   ID    Reserved
;   Number    Offset  |    |      [hex] |   Data Length Code
;   |         [ms]    |    |      |     |   |    Data [hex] ...
;   |         |       |    |      |     |   |    |
;---+-- ------+------ +- --+-- ---+---- +- -+-- -+ -- -- -- -- -- -- --""")
        for trame in frames:
            #Mise en forme id
            id = trame["id"]
            #if not extend
            if  id != 'AFB1C04' and id !='AFB1C00' :
                id = id[-4:]
            # concaténation temps pour ms
            ms = trame['t_s'][6:]+trame['t_ms']
            dlc = trame['dlc']
            #Récupération des datas sans les 0 superflux
            data = trame["data"][:dlc*2] 
               
            #Mise en forme data en fonction du DLC
            data_to_write =""
            for k in range (0,dlc*2,2):
                data_to_write = data_to_write + data[k] + data[k+1] + " "

            #ecriture data
            f.write("\n" + (6-len(str(i+1)))*" " + str(i+1) + ")" +(10-len(ms))*" " + ms
            + " " + "1" + 2*" " + "Rx" + (12-len(id)) * " " 
            + id + " " + "_" + 2*" " + str(trame["dlc"]) + 4*" " + data_to_write[:-1])
            #+ " Data_sorter: " + trame["data_sorter"])  #Only for debug
            i+=1
    print("TRC saved as : "+file_name+" ✅")

def open_log():
    global strct_log_msg
    readed_log_msg = []
    strct_log_msg = []
    # Lis le document et stock chaques lignes dans un tableau
    with open(PATH,'r') as file:
        for line in file:
            readed_log_msg.append(line)
    # Récupère les éléments du msg nécessaire pour le trc
    for msg in readed_log_msg:
        data = msg[25:-2]
        id = msg[12:19]
        t_s = msg[:10]
        t_ms = msg[19:22]
        dlc = int(msg[23])
        strct_log_msg.append({"data":data,
                             "id":id,
                             "t_s":t_s,
                             "t_ms":t_ms,
                             "dlc":dlc})
    #enleve le denier élémetnde la liste
    strct_log_msg.pop(-1)

global strct_log_msg
PATH = "" #Change this Path (.bin log file to be converted to .trc)
open_log()
save_log_trc()
